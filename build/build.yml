parameters:
  sign: false
  nuspecProperties: ''

steps:
- task: UseDotNet@2
  displayName: Install .NET Core 2.1 runtime
  inputs:
    packageType: runtime
    version: 2.1.x

- task: UseDotNet@2
  displayName: Use .NET 6 SDK
  inputs:
    packageType: sdk
    version: 6.x

- ${{ if eq(parameters.sign, 'true') }}:
  - task: ms-vseng.MicroBuildTasks.30666190-6959-11e5-9f96-f56098202fef.MicroBuildSigningPlugin@4
    displayName: Install Signing Plugin
    inputs:
      signType: '$(SignType)'
      feedSource: 'https://pkgs.dev.azure.com/mseng/_packaging/MicroBuildToolset/nuget/v3/index.json'

  - task: ms-vseng.MicroBuildTasks.32f78468-e895-4f47-962c-58a699361df8.MicroBuildSwixPlugin@4
    displayName: Install Swix Plugin
    inputs:
      feedSource: 'https://pkgs.dev.azure.com/mseng/_packaging/MicroBuildToolset/nuget/v3/index.json'

  - task: NuGetCommand@2
    displayName: NuGet restore
    inputs:
      restoreSolution: 'CredentialProvider.Microsoft.VSIX/packages.config'
      restoreDirectory: 'packages'
      vstsFeed: '6a2d6fd3-0b16-40f0-b309-7175c4e86490'

- task: DotNetCoreCLI@2
  displayName: dotnet restore NuGet.config
  inputs:
    command: restore
    projects: 'CredentialProvider.Microsoft/CredentialProvider.Microsoft.csproj'
    feedsToUse: config
    nugetConfigPath: 'CredentialProvider.Microsoft/NuGet.config'
  
- task: MSBuild@1
  displayName: Build CredentialProvider
  inputs:
    solution: 'CredentialProvider.Microsoft/CredentialProvider.Microsoft.csproj'
    configuration: '$(BuildConfiguration)'
    msbuildArguments: '/t:rebuild'

- ${{ if eq(parameters.sign, 'true') }}:
  - task: MSBuild@1
    displayName: Build swixproj
    inputs:
      solution: 'CredentialProvider.Microsoft.VSIX/Microsoft.CredentialProvider.swixproj'
      configuration: '$(BuildConfiguration)'
      msbuildArguments: '/p:OutputPath=$(Build.ArtifactStagingDirectory)\$(BuildConfiguration)\vsix\'

  - task: MSBuild@1
    displayName: Build vsmanproj
    inputs:
      solution: 'CredentialProvider.Microsoft.VSIX/Microsoft.CredentialProvider.vsmanproj'
      configuration: '$(BuildConfiguration)'
      msbuildArguments: '/p:OutputPath=$(Build.ArtifactStagingDirectory)\$(BuildConfiguration)\vsix\'

  - task: ms-vseng.MicroBuildTasks.4305a8de-ba66-4d8b-b2d1-0dc4ecbbf5e8.MicroBuildUploadVstsDropFolder@2
    displayName: Upload VSTS Drop
    inputs:
      DropFolder: '$(Build.ArtifactStagingDirectory)\$(BuildConfiguration)\vsix\'
      AccessToken: $(DevDivDropManageAccessToken)

- task: DotNetCoreCLI@2
  displayName: dotnet publish netcoreapp2.1
  inputs:
    command: publish
    publishWebProjects: false
    projects: 'CredentialProvider.Microsoft/CredentialProvider.Microsoft.csproj'
    arguments: '--no-build --framework netcoreapp2.1 --configuration $(BuildConfiguration)'
    zipAfterPublish: false
    modifyOutputPath: false

- ${{ if ne(parameters.sign, 'true') }}:
  - task: DotNetCoreCLI@2
    displayName: dotnet test
    inputs:
      command: test
      projects: 'CredentialProvider.Microsoft.Tests/CredentialProvider.Microsoft.Tests.csproj'

- task: CopyFiles@2
  displayName: Copy netcore files into tarball
  inputs:
    sourceFolder: '$(Build.SourcesDirectory)\CredentialProvider.Microsoft\bin\$(BuildConfiguration)\netcoreapp2.1\publish\'
    contents: '**\*'
    targetFolder: '$(Build.ArtifactStagingDirectory)\tarball\plugins\netcore\CredentialProvider.Microsoft\'
    cleanTargetFolder: true

- task: CopyFiles@2
  displayName: Copy license files into tarball
  inputs:
    contents: |
      LICENSE
      CredentialProvider.Microsoft\EULA_Microsoft Visual Studio Team Services Credential Provider.docx
      CredentialProvider.Microsoft\ThirdPartyNotices.txt
    targetFolder: '$(Build.ArtifactStagingDirectory)\tarball\'
    flattenFolders: true

- task: ArchiveFiles@2
  displayName: Create netcore tarball
  inputs:
    rootFolderOrFile: '$(Build.ArtifactStagingDirectory)\tarball\'
    includeRootFolder: false
    archiveType: 'tar'
    tarCompression: 'gz'
    archiveFile: '$(Build.ArtifactStagingDirectory)\$(BuildConfiguration)\Microsoft.NetCore2.NuGet.CredentialProvider.tar.gz'
    replaceExistingArchive: true

# NOTE: Changing the name of the zip will break things. Please don't do it.
- task: ArchiveFiles@2
  displayName: Create netcore zip
  inputs:
    rootFolderOrFile: '$(Build.ArtifactStagingDirectory)\tarball\'
    includeRootFolder: false
    archiveType: 'zip'
    archiveFile: '$(Build.ArtifactStagingDirectory)\$(BuildConfiguration)\Microsoft.NetCore2.NuGet.CredentialProvider.zip'
    replaceExistingArchive: true

- task: CopyFiles@2
  displayName: Copy netfx files into tarball
  inputs:
    sourceFolder: '$(Build.SourcesDirectory)\CredentialProvider.Microsoft\bin\$(BuildConfiguration)\net461\'
    contents: '**\*'
    targetFolder: '$(Build.ArtifactStagingDirectory)\tarball\plugins\netfx\CredentialProvider.Microsoft\'

- task: ArchiveFiles@2
  displayName: Create tarball
  inputs:
    rootFolderOrFile: '$(Build.ArtifactStagingDirectory)\tarball\'
    includeRootFolder: false
    archiveType: 'tar'
    tarCompression: 'gz'
    archiveFile: '$(Build.ArtifactStagingDirectory)\$(BuildConfiguration)\Microsoft.NuGet.CredentialProvider.tar.gz'
    replaceExistingArchive: true

# NOTE: Changing the name of the zip will break things. Please don't do it.
- task: ArchiveFiles@2
  displayName: Create zip
  inputs:
    rootFolderOrFile: '$(Build.ArtifactStagingDirectory)\tarball\'
    includeRootFolder: false
    archiveType: 'zip'
    archiveFile: '$(Build.ArtifactStagingDirectory)\$(BuildConfiguration)\Microsoft.NuGet.CredentialProvider.zip'
    replaceExistingArchive: true

- task: CopyFiles@2
  displayName: Collect symbols
  inputs:
    SourceFolder: '$(Build.SourcesDirectory)\CredentialProvider.Microsoft\bin\$(BuildConfiguration)'
    Contents: |
      **\CredentialProvider.Microsoft.dll
      **\CredentialProvider.Microsoft.exe
      **\CredentialProvider.Microsoft.pdb
    TargetFolder: '$(Build.ArtifactStagingDirectory)\symbols'

- task: PublishSymbols@2
  inputs:
    SymbolsFolder: '$(Build.ArtifactStagingDirectory)\symbols'
    SearchPattern:  '**\*.pdb'
    IndexSources: true
    PublishSymbols: ${{ eq(parameters.sign, 'true') }}
    SymbolServerType: TeamServices
    SymbolsProduct: 'artifacts-credprovider'
  env:
    ArtifactServices.Symbol.AccountName: 'microsoft'
    ArtifactServices.Symbol.UseAAD: 'true'

- task: PublishPipelineArtifact@1
  displayName: 'Upload symbols'
  inputs:
    artifact: "Symbols"
    targetPath: '$(Build.ArtifactStagingDirectory)\symbols'


- powershell: 'Write-Output ("##vso[task.setvariable variable=SignType;]")' 
  displayName: Clear SignType

- task: DotNetCoreCLI@2
  displayName: dotnet pack
  inputs:
    command: pack
    packagesToPack: 'CredentialProvider.Microsoft/CredentialProvider.Microsoft.csproj'
    packDirectory: '$(Build.ArtifactStagingDirectory)\$(BuildConfiguration)'
    buildProperties: '${{ parameters.nuspecProperties }}'

- task: DotNetCoreCLI@2
  displayName: dotnet push
  inputs:
    command: push
    packagesToPush: '$(Build.ArtifactStagingDirectory)/$(BuildConfiguration)/*.nupkg'
    publishVstsFeed: '54754426-96db-4f6e-8a3a-64265d1cc147'
  condition: eq(variables['PushNupkg'], 'true')

- task: PublishBuildArtifacts@1
  displayName: Publish Artifact $(Build.BuildNumber)
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)\$(BuildConfiguration)\'
    ArtifactName: '$(Build.BuildNumber)'
